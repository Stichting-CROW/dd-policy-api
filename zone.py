from pydantic import BaseModel, Field
from typing import Optional, Dict
from geojson_pydantic import Feature, Polygon
import stop
import no_parking
from uuid import UUID, uuid1
from enum import Enum

class GeographyType(str, Enum):
    monitoring = "monitoring"
    stop = "stop"
    no_parking = "no_parking"
    
PointFeatureModel = Feature[Polygon, Dict]
class Zone(BaseModel):
    zone_id: Optional[int]
    area: PointFeatureModel
    name: str
    municipality: str
    # variables relating to geography because there is a 1 to 1 relation
    geography_id: Optional[UUID] = Field(default_factory=uuid1)
    description: str
    geography_type: GeographyType
    effective_date: Optional[str]
    published_date: Optional[str]
    retire_data: Optional[str]
    stop: Optional[stop.Stop]
    no_parking: Optional[no_parking.NoParking]



# CREATE TABLE zones (
#     zone_id INT GENERATED BY DEFAULT AS IDENTITY,
#     area    GEOMETRY,
#     name    VARCHAR(255),
#     owner        VARCHAR(255),
#     municipality VARCHAR(255),
#     stats_ref    VARCHAR(40),
#     PRIMARY KEY(zone_id)
# );

# CREATE TABLE geographies (
# 	geography_id UUID NOT NULL,
# 	zone_id REFERENCE_BY (zones.zone_id),
# 	name VARCHAR(255) NOT NULL,
# 	description VARCHAR(255),
# 	geography_type VARCHAR(255),
# 	effective_date timestamp,
# 	published_data timestamp NOT NULL,
# 	retire_date timestamp,
# 	prev_geographies ARRAY
# );

# CREATE TABLE stops (
# 	stop_id UUID NOT NULL,
# 	name VARCHAR(255) NOT NULL,
# 	location GEOMETRY NOT NULL,
# 	status JSONB NOT NULL,
# 	capacity JSONB NOT NULL,
# 	geography_id NOT NULL
# );

# CREATE TABLE no_parking_policy(
# 	geography_id UUID NOT NULL,
# 	start_date TIMESTAMP NOT NULL,
# 	end_date TIMESTAMP
# );